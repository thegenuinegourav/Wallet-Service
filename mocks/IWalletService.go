// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/WalletService/model"
	mock "github.com/stretchr/testify/mock"
)

// IWalletService is an autogenerated mock type for the IWalletService type
type IWalletService struct {
	mock.Mock
}

// BlockWalletService provides a mock function with given fields: id
func (_m *IWalletService) BlockWalletService(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWalletService provides a mock function with given fields: id, isUserId
func (_m *IWalletService) GetWalletService(id int, isUserId bool) (*model.Wallet, error) {
	ret := _m.Called(id, isUserId)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(int, bool) *model.Wallet); ok {
		r0 = rf(id, isUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(id, isUserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostWalletService provides a mock function with given fields: wallet, userID
func (_m *IWalletService) PostWalletService(wallet *model.Wallet, userID int) (*model.Wallet, error) {
	ret := _m.Called(wallet, userID)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(*model.Wallet, int) *model.Wallet); ok {
		r0 = rf(wallet, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Wallet, int) error); ok {
		r1 = rf(wallet, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnBlockWalletService provides a mock function with given fields: id
func (_m *IWalletService) UnBlockWalletService(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWalletService provides a mock function with given fields: updatedWallet
func (_m *IWalletService) UpdateWalletService(updatedWallet *model.Wallet) (*model.Wallet, error) {
	ret := _m.Called(updatedWallet)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(*model.Wallet) *model.Wallet); ok {
		r0 = rf(updatedWallet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Wallet) error); ok {
		r1 = rf(updatedWallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
