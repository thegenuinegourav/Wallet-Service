// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/WalletService/model"
	mock "github.com/stretchr/testify/mock"
)

// ITransactionRepository is an autogenerated mock type for the ITransactionRepository type
type ITransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: transaction
func (_m *ITransactionRepository) CreateTransaction(transaction *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(transaction)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(*model.Transaction) *model.Transaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActiveTransactions provides a mock function with given fields:
func (_m *ITransactionRepository) GetAllActiveTransactions() (*[]model.Transaction, error) {
	ret := _m.Called()

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func() *[]model.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTransactions provides a mock function with given fields:
func (_m *ITransactionRepository) GetAllTransactions() (*[]model.Transaction, error) {
	ret := _m.Called()

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func() *[]model.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: id
func (_m *ITransactionRepository) GetTransactionById(id int) (*model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(int) *model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByWalletId provides a mock function with given fields: id
func (_m *ITransactionRepository) GetTransactionsByWalletId(id int) (*[]model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func(int) *[]model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAllActiveTransactions provides a mock function with given fields:
func (_m *ITransactionRepository) UpdateAllActiveTransactions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: transaction
func (_m *ITransactionRepository) UpdateTransaction(transaction *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(transaction)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(*model.Transaction) *model.Transaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
