// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/WalletService/model"
	mock "github.com/stretchr/testify/mock"
)

// ITransactionService is an autogenerated mock type for the ITransactionService type
type ITransactionService struct {
	mock.Mock
}

// GetActiveTransactionsService provides a mock function with given fields:
func (_m *ITransactionService) GetActiveTransactionsService() (*[]model.Transaction, error) {
	ret := _m.Called()

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func() *[]model.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionService provides a mock function with given fields: id
func (_m *ITransactionService) GetTransactionService(id int) (*model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(int) *model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByWalletIdService provides a mock function with given fields: id
func (_m *ITransactionService) GetTransactionsByWalletIdService(id int) (*[]model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func(int) *[]model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsService provides a mock function with given fields:
func (_m *ITransactionService) GetTransactionsService() (*[]model.Transaction, error) {
	ret := _m.Called()

	var r0 *[]model.Transaction
	if rf, ok := ret.Get(0).(func() *[]model.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTransactionService provides a mock function with given fields: transaction, walletID
func (_m *ITransactionService) PostTransactionService(transaction *model.Transaction, walletID int) (*model.Transaction, error) {
	ret := _m.Called(transaction, walletID)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(*model.Transaction, int) *model.Transaction); ok {
		r0 = rf(transaction, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Transaction, int) error); ok {
		r1 = rf(transaction, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActiveTransactionsService provides a mock function with given fields:
func (_m *ITransactionService) UpdateActiveTransactionsService() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransactionService provides a mock function with given fields: id, transaction
func (_m *ITransactionService) UpdateTransactionService(id int, transaction *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(id, transaction)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(int, *model.Transaction) *model.Transaction); ok {
		r0 = rf(id, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *model.Transaction) error); ok {
		r1 = rf(id, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
